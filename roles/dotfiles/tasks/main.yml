---
- debug: var=ansible_distribution
- name: include env specific vars
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "default.yml"

- name: check for existing ~/.gitenv file
  stat: path={{ ansible_env.HOME }}/.gitenv follow=true
  register: gitenv_file

- name: reset .gitenv base file
  template: src=env.j2 dest={{ ansible_env.HOME }}/.gitenv
  when: not gitenv_file.stat.exists

- name: check version of git
  shell: 'git --version |grep -Po "\d"'
  always_run: yes
  register: git_version
  changed_when: "git_version.rc != 0"

- name: configure git
  lineinfile: dest={{ ansible_env.HOME }}/.gitenv
    line="[push]
      default = simple"
  tags:
    - dotfiles
  when: gitenv_file.stat.exists and git_version.stdout_lines[0]|int > 1


- name: ensure ~/.dotfiles repo exists
  git:
    repo=git@github.com:bcomnes/dotfiles.git
    dest={{ dotfiles_path }}
    update=yes
    accept_hostkey=yes
    force=yes
    executable={{ git_exe | default(omit) }}
  register: dotfiles_repo

- name: list dotfiles
  shell: "find $PWD -maxdepth 1 -type f"
  args:
    chdir: "{{ dotfiles_path }}/dotfiles/"
  register: dotfiles
  always_run: yes
  changed_when: "dotfiles.rc != 0"

- name: symlink dotfiles
  file:
    src={{ item }}
    dest={{ ansible_env.HOME }}/.{{ item | basename }}
    state=link
  with_items: dotfiles.stdout_lines

- name: list sshfiles
  shell: "find $PWD -maxdepth 1 -type f"
  args:
    chdir: "{{ dotfiles_path }}/ssh/"
  register: sshfiles
  always_run: yes
  changed_when: "sshfiles.rc != 0"

- name: symlink ssh files
  file:
    src="{{ dotfiles_path }}/ssh/{{ item | basename }}"
    dest="{{ ansible_env.HOME }}/.ssh/{{ item | basename }}"
    state=link
    force=true
    mode="{{'0700' if item|basename == 'rc' else '0600'}}"
  with_items: sshfiles.stdout_lines

- name: generate authorized_keys
  authorized_key:
    key="{{ item }}"
    user={{ ansible_ssh_user }}
  with_file:
    - ./bret-mbr.local.pub
    - ./bret-win7.local.pub
    - ./bret-ua.local.pub

- name: ensure .vim directories exists
  file:
    dest={{ ansible_env.HOME }}/.vim/{{ item }}
    state=directory
  with_items:
    - backup
    - colors
    - tmp
    - undo
    - view

- name: list vimcolorfiles
  shell: "find $PWD -maxdepth 1 -type f"
  args:
    chdir: "{{ dotfiles_path }}/vim/colors/"
  register: vimcolorfiles
  always_run: yes
  changed_when: "vimcolorfiles.rc != 0"

- name: link color files
  file:
    src={{ item }}
    dest={{ ansible_env.HOME }}/.vim/colors/{{ item | basename }}
    state=link
  with_items: vimcolorfiles.stdout_lines

- name: set up vundle repo
  git:
    repo=git@github.com:gmarik/Vundle.vim.git
    dest={{ ansible_env.HOME }}/.vim/bundle/Vundle.vim
    update=yes
    accept_hostkey=yes
    force=no
    executable={{ git_exe | default(omit) }}
  register: vundle

- name: install plugins
  command: vim +PluginInstall +qall
  when: vundle.changed or dotfiles_repo.changed

- name: ensure ~/.config directories
  file:
    path={{ ansible_env.HOME }}/.config
    state=directory

- name: list htopfiles
  shell: "find $PWD -maxdepth 1 -type f"
  args:
    chdir: "{{ dotfiles_path }}/config/htop/"
  register: htopfiles
  always_run: yes
  changed_when: "htopfiles.rc != 0"

- name: ensure ~/.config/htop directory
  file:
    path={{ ansible_env.HOME }}/{{ htoprc_prefix }}
    state=directory

- name: symlink htop files
  # htop_prefix varies from os family to family, namely darwin
  file:
    src={{ dotfiles_path }}/config/htop/{{ item | basename }}
    dest={{ ansible_env.HOME }}/{{ htoprc_prefix }}{{ item | basename }}
    state=link
    force=true
  with_items: htopfiles.stdout_lines

- name: check for existing ~/.env file
  stat: path={{ ansible_env.HOME }}/.env follow=true
  register: env_file

- name: reset .env base file
  template: src=env.j2 dest={{ ansible_env.HOME }}/.env
  when: not env_file.stat.exists

- name: check for existing ~/.bash_env file
  stat: path={{ ansible_env.HOME }}/.bash_env follow=true
  register: bash_env_file

- name: reset .bash_env base file
  template: src=env.j2 dest={{ ansible_env.HOME }}/.bash_env
  when: not bash_env_file.stat.exists

